m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
#https://www.jessesadler.com/post/geocoding-with-r/
#locations <- as_tibble(dfLatLong)
#locations_sf <- st_as_sf(locations, coords = c("long", "lat"), crs = 4326)
#mapview(cd)
#qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, -40), ylim = c(-30, -50), asp = 1)
#https://www.jessesadler.com/post/geocoding-with-r/
#locations <- as_tibble(dfLatLong)
#locations_sf <- st_as_sf(locations, coords = c("long", "lat"), crs = 4326)
#mapview(cd)
#qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, -30), ylim = c(-40, -50), asp = 1)
#https://www.jessesadler.com/post/geocoding-with-r/
#locations <- as_tibble(dfLatLong)
#locations_sf <- st_as_sf(locations, coords = c("long", "lat"), crs = 4326)
#mapview(cd)
#qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
newmap <- getMap(resolution = "low")
plot(newmap, asp = 1)
#https://www.jessesadler.com/post/geocoding-with-r/
#locations <- as_tibble(dfLatLong)
#locations_sf <- st_as_sf(locations, coords = c("long", "lat"), crs = 4326)
#mapview(cd)
#qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
newmap <- getMap(resolution = "low")
plot(newmap, asp = 10)
#https://www.jessesadler.com/post/geocoding-with-r/
#locations <- as_tibble(dfLatLong)
#locations_sf <- st_as_sf(locations, coords = c("long", "lat"), crs = 4326)
#mapview(cd)
#qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
newmap <- getMap(resolution = "low")
plot(newmap, asp = 1)
#https://www.jessesadler.com/post/geocoding-with-r/
#locations <- as_tibble(dfLatLong)
#locations_sf <- st_as_sf(locations, coords = c("long", "lat"), crs = 4326)
#mapview(cd)
#qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
?getMap
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
newmap <- getMap()
plot(newmap, asp = 1)
#https://www.jessesadler.com/post/geocoding-with-r/
#locations <- as_tibble(dfLatLong)
#locations_sf <- st_as_sf(locations, coords = c("long", "lat"), crs = 4326)
#mapview(cd)
#qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
plot(newmap)
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
plot(newmap)
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
newmap <- getMap()
plot(newmap) +
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
#https://www.jessesadler.com/post/geocoding-with-r/
#locations <- as_tibble(dfLatLong)
#locations_sf <- st_as_sf(locations, coords = c("long", "lat"), crs = 4326)
#mapview(cd)
#qmplot(lon, lat, data = murder, colour = I('red'), size = I(3), darken = .3)
# outra forma de plotar o mapa:
newmap <- getMap(mapRegion = "America")
library(raster)
# outra forma de plotar o mapa:
brazil <- raster::getData("GADM", country = "Brazil", level = 1)
brazil
View(brazil)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
# outra forma de plotar o mapa:
brazil <- raster::getData("GADM", country = "Brazil", level = 1)
rworldmap::mapPolys(brazil, nameColumnToPlot="NAME_1", addLegend=FALSE)
text(brazil, label="NAME_1", cex=0.7)
newmap <- getMap()
plot(newmap) +
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
# outra forma de plotar o mapa:
brazil <- raster::getData("GADM", country = "Brazil", level = 1)
rworldmap::mapPolys(brazil, nameColumnToPlot="NAME_1", addLegend=FALSE)
#text(brazil, label="NAME_1", cex=0.7)
newmap <- getMap()
plot(newmap) +
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
tar o mapa:
brazil <- raster::getData("GADM", country = "Brazil", level = 1)
rworldmap::mapPolys(brazil, nameColumnToPlot="NAME_1", addLegend=FALSE)
text(brazil, label="NAME_1", cex=0.7)
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
# outra forma de plotar o mapa:
brazil <- raster::getData("GADM", country = "Brazil", level = 1)
rworldmap::mapPolys(brazil, nameColumnToPlot="NAME_1", addLegend=FALSE) +
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
# outra forma de plotar o mapa:
brazil <- raster::getData("GADM", country = "Brazil", level = 1)
rworldmap::mapPolys(brazil, nameColumnToPlot="NAME_1", addLegend=FALSE)
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
text(brazil, label="NAME_1", cex=0.7)
newmap <- getMap()
plot(newmap) +
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
brazil <- raster::getData("GADM", country = "Brazil", level = 2)
rworldmap::mapPolys(brazil, nameColumnToPlot="NAME_1", addLegend=FALSE)
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
text(brazil, label="NAME_1", cex=0.7)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>% setView(cntr_crds[2], cntr_crds[1], zoom = 16)
# outra forma de plotar o mapa:
newmap <- getMap()
plot(newmap) +
points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
?setView
?leatlet
?leaflet
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16)
addTitles()
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addTitles()
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>%
addTitles() %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16)
m@map
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>%
addTitles() %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(cntr_crds[2], cntr_crds[1], 'INATEL')
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(cntr_crds[2], cntr_crds[1], 'INATEL')
# outra forma de plotar o mapa:
#newmap <- getMap()
#plot(newmap) +
#points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(as.numeric(dfLatLong$lat), as.numeric(dfLatLong$lat), dfLatLong$filename)
# outra forma de plotar o mapa:
#newmap <- getMap()
#plot(newmap) +
#points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(as.numeric(dfLatLong$lat), as.numeric(dfLatLong$long), dfLatLong$filename)
# outra forma de plotar o mapa:
#newmap <- getMap()
#plot(newmap) +
#points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
cntr_crds
# uma forma de plotar o mapa:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), dfLatLong$filename)
# outra forma de plotar o mapa:
#newmap <- getMap()
#plot(newmap) +
#points(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), col = "red", cex = .6)
# ponto central para posicionar o mapa:
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
# Mapa mostrando lat/long e nome do dataset:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), dfLatLong$filename)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(mapview)
library(sp)
library(leaflet)
library(rworldmap)
library(raster)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#datasets
dataset = read.csv("dataset_1.csv", header = FALSE, comment.char = '!')
class(dataset)
str(dataset)
for(i in 2:10) {
filename = paste(paste("dataset_", i, sep = ""), ".csv", sep = "")
#print(filename)
new_dataset = read.csv(filename, header = FALSE, comment.char = '!')
#str(new_dataset)
dataset <- rbind(dataset, new_dataset)
}
dataset <- na.exclude(dataset)
class(dataset)
str(dataset)
dfLatLong <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(dfLatLong) <- c("filename", "lat", "long")
for(i in 1:10) {
filename = paste(paste("dataset_", i, sep = ""), ".csv", sep = "")
lines = readLines(filename)
# pegando dados de latitude e longitude de cada arquivo:
lat <- lines[13]
long <- lines[14]
lat <- substring(lat,17)
long <- substring(long,18)
# preparando para transformar os dados de geolocation em numérico:
lat_chd = paste(substr(lat,1,2), sep="", "d")
lat_chm = paste(substr(lat,4,5), sep="", "'")
lat_chs = paste(as.character(as.numeric(substr(lat,6,11)) * 60), sep="", "\"")
lat_ns = "S"
long_chd = paste(substr(long,1,2), sep="", "d")
long_chm = paste(substr(long,4,5), sep="", "'")
long_chs = paste(as.character(as.numeric(substr(long,6,11)) * 60), sep="", "\"")
long_ew = "W"
lat_from = paste(lat_chd, sep="",
paste(lat_chm, sep = "",
paste(lat_chs, sep = "",
paste(lat_ns, sep=""))))
long_from = paste(long_chd, sep="",
paste(long_chm, sep = "",
paste(long_chs, sep = "",
paste(long_ew, sep=""))))
coords <- c(lat_from, long_from)
cd = as.numeric(char2dms(coords))
# armazenando nome do arquivo e dados de localização em um dataframe:
dfLatLong[nrow(dfLatLong) + 1,] = c(filename, cd[1], cd[2])
}
class(dfLatLong)
str(dfLatLong)
# ponto central para posicionar o mapa:
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
# Mapa mostrando lat/long e nome do dataset:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), dfLatLong$filename)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(mapview)
library(sp)
library(leaflet)
library(rworldmap)
library(raster)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(mapview)
library(sp)
library(leaflet)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(mapview)
library(sp)
library(leaflet)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(mapview)
library(sp)
library(leaflet)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#datasets
dataset = read.csv("dataset_1.csv", header = FALSE, comment.char = '!')
class(dataset)
str(dataset)
for(i in 2:10) {
filename = paste(paste("dataset_", i, sep = ""), ".csv", sep = "")
#print(filename)
new_dataset = read.csv(filename, header = FALSE, comment.char = '!')
#str(new_dataset)
dataset <- rbind(dataset, new_dataset)
}
dataset <- na.exclude(dataset)
class(dataset)
str(dataset)
dfLatLong <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(dfLatLong) <- c("filename", "lat", "long")
for(i in 1:10) {
filename = paste(paste("dataset_", i, sep = ""), ".csv", sep = "")
lines = readLines(filename)
# pegando dados de latitude e longitude de cada arquivo:
lat <- lines[13]
long <- lines[14]
lat <- substring(lat,17)
long <- substring(long,18)
# preparando para transformar os dados de geolocation em numérico:
lat_chd = paste(substr(lat,1,2), sep="", "d")
lat_chm = paste(substr(lat,4,5), sep="", "'")
lat_chs = paste(as.character(as.numeric(substr(lat,6,11)) * 60), sep="", "\"")
lat_ns = "S"
long_chd = paste(substr(long,1,2), sep="", "d")
long_chm = paste(substr(long,4,5), sep="", "'")
long_chs = paste(as.character(as.numeric(substr(long,6,11)) * 60), sep="", "\"")
long_ew = "W"
lat_from = paste(lat_chd, sep="",
paste(lat_chm, sep = "",
paste(lat_chs, sep = "",
paste(lat_ns, sep=""))))
long_from = paste(long_chd, sep="",
paste(long_chm, sep = "",
paste(long_chs, sep = "",
paste(long_ew, sep=""))))
coords <- c(lat_from, long_from)
cd = as.numeric(char2dms(coords))
# armazenando nome do arquivo e dados de localização em um dataframe:
dfLatLong[nrow(dfLatLong) + 1,] = c(filename, cd[1], cd[2])
}
class(dfLatLong)
str(dfLatLong)
# ponto central para posicionar o mapa:
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
# Mapa mostrando lat/long e nome do dataset:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), dfLatLong$filename)
#datasets
dataset = read.csv("dataset_1.csv", header = FALSE, comment.char = '!')
class(dataset)
str(dataset)
for(i in 2:10) {
filename = paste(paste("dataset_", i, sep = ""), ".csv", sep = "")
#print(filename)
new_dataset = read.csv(filename, header = FALSE, comment.char = '!')
#str(new_dataset)
dataset <- rbind(dataset, new_dataset)
}
dataset <- na.exclude(dataset)
class(dataset)
str(dataset)
dfLatLong <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(dfLatLong) <- c("filename", "lat", "long")
for(i in 1:10) {
filename = paste(paste("dataset_", i, sep = ""), ".csv", sep = "")
lines = readLines(filename)
# pegando dados de latitude e longitude de cada arquivo:
lat <- lines[13]
long <- lines[14]
lat <- substring(lat,17)
long <- substring(long,18)
# preparando para transformar os dados de geolocation em numérico:
lat_chd = paste(substr(lat,1,2), sep="", "d")
lat_chm = paste(substr(lat,4,5), sep="", "'")
lat_chs = paste(as.character(as.numeric(substr(lat,6,11)) * 60), sep="", "\"")
lat_ns = "S"
long_chd = paste(substr(long,1,2), sep="", "d")
long_chm = paste(substr(long,4,5), sep="", "'")
long_chs = paste(as.character(as.numeric(substr(long,6,11)) * 60), sep="", "\"")
long_ew = "W"
lat_from = paste(lat_chd, sep="",
paste(lat_chm, sep = "",
paste(lat_chs, sep = "",
paste(lat_ns, sep=""))))
long_from = paste(long_chd, sep="",
paste(long_chm, sep = "",
paste(long_chs, sep = "",
paste(long_ew, sep=""))))
coords <- c(lat_from, long_from)
cd = as.numeric(char2dms(coords))
# armazenando nome do arquivo e dados de localização em um dataframe:
dfLatLong[nrow(dfLatLong) + 1,] = c(filename, cd[1], cd[2])
}
class(dfLatLong)
str(dfLatLong)
# ponto central para posicionar o mapa:
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
# Mapa mostrando lat/long e nome do dataset:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), dfLatLong$filename)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(mapview)
library(sp)
library(leaflet)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#datasets
dataset = read.csv("dataset_1.csv", header = FALSE, comment.char = '!')
class(dataset)
str(dataset)
for(i in 2:10) {
filename = paste(paste("dataset_", i, sep = ""), ".csv", sep = "")
#print(filename)
new_dataset = read.csv(filename, header = FALSE, comment.char = '!')
#str(new_dataset)
dataset <- rbind(dataset, new_dataset)
}
dataset <- na.exclude(dataset)
class(dataset)
str(dataset)
dfLatLong <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(dfLatLong) <- c("filename", "lat", "long")
for(i in 1:10) {
filename = paste(paste("dataset_", i, sep = ""), ".csv", sep = "")
lines = readLines(filename)
# pegando dados de latitude e longitude de cada arquivo:
lat <- lines[13]
long <- lines[14]
lat <- substring(lat,17)
long <- substring(long,18)
# preparando para transformar os dados de geolocation em numérico:
lat_chd = paste(substr(lat,1,2), sep="", "d")
lat_chm = paste(substr(lat,4,5), sep="", "'")
lat_chs = paste(as.character(as.numeric(substr(lat,6,11)) * 60), sep="", "\"")
lat_ns = "S"
long_chd = paste(substr(long,1,2), sep="", "d")
long_chm = paste(substr(long,4,5), sep="", "'")
long_chs = paste(as.character(as.numeric(substr(long,6,11)) * 60), sep="", "\"")
long_ew = "W"
lat_from = paste(lat_chd, sep="",
paste(lat_chm, sep = "",
paste(lat_chs, sep = "",
paste(lat_ns, sep=""))))
long_from = paste(long_chd, sep="",
paste(long_chm, sep = "",
paste(long_chs, sep = "",
paste(long_ew, sep=""))))
coords <- c(lat_from, long_from)
cd = as.numeric(char2dms(coords))
# armazenando nome do arquivo e dados de localização em um dataframe:
dfLatLong[nrow(dfLatLong) + 1,] = c(filename, cd[1], cd[2])
}
class(dfLatLong)
str(dfLatLong)
# ponto central para posicionar o mapa:
cntr_crds <- c(mean(as.numeric(dfLatLong$lat)), mean(as.numeric(dfLatLong$long)))
# Mapa mostrando lat/long e nome do dataset:
m <- mapview()
m@map %>%
setView(cntr_crds[2], cntr_crds[1], zoom = 16) %>%
addPopups(as.numeric(dfLatLong$long), as.numeric(dfLatLong$lat), dfLatLong$filename)
